devtools::install_github("mplex/HASS", subdir="pkg/ddhh")
devtools::install_github("sdam-au/HASS", subdir="pkg/ddhh")
library(ddhh)
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
Thrace <-EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
province = Thracia
)
Thrace <-EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
province = Roma
)
Thrace <-EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
hd_nr = 1000
)
View(EDH_all)
View(Thrace)
View(EDH_all)
View(Thrace)
View(Thrace)
Thrace <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
hd_nr = 2000
)
View(Thrace)
Thrace <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
province = Thrace
)
Thrace <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
province = Thrace
)
Thrace <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
province = Thracia
)
Thrace <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country = Bulgaria
)
Bulgaria <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country = Bulgaria
)
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
Bulgaria <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country ="Bulgaria"
)
View(Bulgaria)
Bulgaria <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, country ="Bulgaria"
)
Bulgaria <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, country ="Bulgaria"
)
Bulgaria <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country ="*"
)
View(Bulgaria)
Bulgaria <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country ="Bulga*"
)
View(Bulgaria)
Bulgaria <- get.edh(country ="Bulgaria"
)
View(Bulgaria)
Bulgaria <- get.edh(country ="Bulgaria")
Bulgaria <- get.edh(search="geography", bbox="11,47,12,48")
View(Bulgaria)
Bulgaria <- get.edh(findspot_modern="madrid")
View(Bulgaria)
Bulgaria <- get.edh(findspot_modern="sofia")
Sofia <- get.edh(findspot_modern="sofia")
View(Sofia)
Sofia <- get.edh(findspot_modern="Sofia")
View(Sofia)
Bulgaria <get.edh(country="bg")
Bulgaria <get.edh(country="bulgaria")
Bulgaria <get.edh(country="Bulgaria")
Bulgaria <get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country="Bulgaria")
View(Bulgaria)
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID="*", hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID="*", hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID="*"
)
knitr::opts_chunk$set(echo = TRUE)
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
Bulgaria <get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country="Bulgaria")
knitr::opts_chunk$set(echo = TRUE)
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
Bulgaria <get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country="Bulgaria")
Sofia <- get.edh(findspot_modern="Sofia")
knitr::opts_chunk$set(echo = TRUE)
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
```{r setup, include=FALSE}
devtools::install_github("mplex/HASS", subdir="pkg/ddhh")
devtools::install_github("mplex/HASS", subdir="pkg/ddhh")
# installation of tools
devtools::install_github("mplex/HASS", subdir="pkg/ddhh")
devtools::install_github("sdam-au/HASS", subdir="pkg/ddhh")
library(ddhh)
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
Sofia <- get.edh(findspot_modern="Sofia")
Bulgaria <get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
country="Bulgaria")
#
# getting the data from EDH API via R, divided into categories
EDH_all <- get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api",
ID, hd_nr, uri, tm_nr, trismegistos_uri, pleiades_id, geonames_id, addID, last_update, responsible_individual, work_status,
country, modern_region, findspot_modern, province_label, findspot_ancient, bbox, edh_geography_uri,
year_not_before, year_not_after,
type_of_monument,
material, depth, height, width, letter_size,
type_of_inscription,
language, diplomatic_text, transcription,
people,
commentary, literature
)
Sofia <- get.edh(findspot_modern="Sofia")
Sofia <- get.edh(findspot_modern="Roma")
View(Sofia)
Sofia <- get.edh(findspot_modern="Sofia")
Bulgaria <get.edh(
country="Bulgaria")
Bulgaria <get.edh(country="Bulgaria")
Bulgaria <-get.edh(country="Bulgaria") # error, does not work
insc_2564 <-get.edh(hd_nr="2564") # error, does not work
View(insc_2564)
sample100 <- [1:100]
sample100 <- [[1:100]]
sample100 <- c([[1:100]])
sample100 <- c(1:100)
insc_1_to_100 <-get.edh(hd_nr=sample100)
insc_1_to_100 <-get.edh(hd_nr="sample100")
View(insc_1_to_100)
insc_1_to_100 <-get.edh(hd_nr=sample100)
aquae <-get.edh(findspot_ancient = aquae*)
aquae <-get.edh(findspot_ancient = "aquae*")
aquae <-get.edh(material = "marble")
marble <-get.edh(material = "marmor")
marble <-get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api", material = "marmor")
View(insc_2564)
View(Bulgaria)
data("EDH")
class(EDH)
EDH_df <-as.data.frame(do.call(rbind, EDH))
class(EDH)
View(EDH_df)
EDH_inscriptions <- lapply(EDH, function (x) x[c("ID", "language", "material", "type_of_monument",
"findspot_ancient", "findspot_modern",
"country","province_label", "not_after", "not_before",
"type_of_inscription", "diplomatic_text", "transcription")] )
EDH_df <-as.data.frame(do.call(rbind, EDH_inscriptions))
class(EDH)
View(EDH_df)
EDH_inscriptions <- lapply(EDH, function (x) x[c("ID", "hd_nr", "uri", "tm_nr", "trismegistos_uri", "pleiades_id", "geonames_id", "addID", "last_update", "responsible_individual", "work_status",
"country", "modern_region", "findspot_modern", "province_label", "findspot_ancient", "bbox", "edh_geography_uri",
"year_not_before", "year_not_after", "type_of_monument","material", "depth", "height", "width", "letter_size",
"type_of_inscription", "language", "diplomatic_text", "transcription", "people", "commentary", "literature")] )
EDH_df <-as.data.frame(do.call(rbind, EDH_inscriptions))
class(EDH)
class(EDH_df)
View(EDH_df)
names(EDh_df)
names(EDH_df)
names(EDH)
EDH_inscriptions <- lapply(EDH, function (x) x[c("ID", "hd_nr", "uri", "tm_nr", "trismegistos_uri", "pleiades_id", "geonames_id", "addID", "last_update", "responsible_individual", "work_status",
"country", "modern_region", "findspot_modern", "province_label", "findspot_ancient", "edh_geography_uri",
"not_before", "not_after", "type_of_monument","material", "depth", "height", "width", "letter_size",
"type_of_inscription", "language", "diplomatic_text", "transcription", "people", "commentary", "literature")] )
EDH_df <-as.data.frame(do.call(rbind, EDH_inscriptions))
class(EDH_df)
names(EDH_df)
View(EDH)
EDH_inscriptions <- lapply(EDH, function (x) x[c("ID", "id", "uri", "tm_nr", "trismegistos_uri", "pleiades_id", "geonames_id", "addID", "last_update", "responsible_individual", "work_status",
"country", "modern_region", "findspot_modern", "province_label", "findspot_ancient", "edh_geography_uri",
"not_before", "not_after", "type_of_monument","material", "depth", "height", "width", "letter_size",
"type_of_inscription", "language", "diplomatic_text", "transcription", "people", "commentary", "literature")] )
EDH_df <-as.data.frame(do.call(rbind, EDH_inscriptions))
class(EDH_df)
names(EDH_df)
View(EDH)
EDH_inscriptions <- lapply(EDH, function (x) x[c("ID", "id", "uri", "tm_nr", "trismegistos_uri", "pleiades_id", "geonames_id", "addID", "last_update", "responsible_individual", "work_status",
"country", "modern_region", "province_label", "findspot", "year_of_find", "coordinates", "findspot_modern", "findspot_ancient", "edh_geography_uri","present_location",
"not_before", "not_after", "type_of_monument","material", "depth", "height", "width", "letter_size",
"type_of_inscription", "language", "origdate_text", "diplomatic_text", "transcription",
"people", "religion","geography", "military", "social_economic_legal_history","objecttype", "commentary", "literature", "fotos", "external_image_uris")] )
EDH_df <-as.data.frame(do.call(rbind, EDH_inscriptions))
class(EDH_df)
names(EDH_df)
EDH_inscriptions <- lapply(EDH, function (x) x[c("ID", "id", "uri", "tm_nr", "trismegistos_uri", "pleiades_id", "geonames_id", "addID", "last_update", "responsible_individual", "work_status",
"country", "modern_region", "province_label", "findspot", "year_of_find", "coordinates", "findspot_modern", "findspot_ancient", "edh_geography_uri","present_location",
"not_before", "not_after", "type_of_monument","material", "depth", "height", "width", "letter_size",
"type_of_inscription", "language", "origdate_text", "diplomatic_text", "transcription",
"people", "religion","geography", "military", "social_economic_legal_history","objecttype", "commentary", "literature", "fotos", "external_image_uris")] )
EDH_df <-as.data.frame(do.call(rbind, EDH_inscriptions))
names(EDH_df)
cleaning_edh_inscriptions <- function(original_text) {
clean_text <- gsub(pattern="\\[[— ]+\\]", replacement="", x=original_text, perl=TRUE) # missing text in square brackets replaced by nothing
clean_text <- gsub(pattern="\\[[-]+\\]", replacement="", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="{[^}]*}[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #suggested substituted text in curly braces and with superscript number replaced by nothing
clean_text <- gsub(pattern="[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #getting rid of all superscripts
clean_text <- gsub(pattern="-\\n", replacement="", x=clean_text, perl=TRUE) #joining words split into two lines
clean_text <- gsub(pattern="[\\{\\<\\[\\(*\\)\\]\\>\\}]", replacement="", x=clean_text, perl=TRUE) #getting rid of square and round brackets, substituting with nothing
clean_text <- gsub(pattern="[⏕–⏓〛〚\\|,.#%?!—∙·❦⏑/]", replacement=" ", x=clean_text, perl=TRUE) #getting rid of all sorts of things that I don't need, substituting with space
clean_text <- gsub(pattern="(vacat|vac|vac.|v.)", replacement=" ", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="\\s+", replacement=" ", x=clean_text, perl=TRUE) # getting rid of more than one white space, substituting with one white space
clean_text <- gsub(pattern="^\\s", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the beginning of the line
clean_text <- gsub(pattern="\\s$", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the end of the line
return(clean_text)
}
# cleaning the dataset
inscriptions_cleaned <- EDH_df %>%
mutate(text_clean = cleaning_edh_inscriptions(EDH_df$transcription))
library(dplyr)
library(tidyverse)
# cleaning the dataset
inscriptions_cleaned <- EDH_df %>%
mutate(text_clean = cleaning_edh_inscriptions(EDH_df$transcription))
EDH_inscriptions <- lapply(EDH, function (x) x[c("ID","diplomatic_text", transcription")])
EDH_df <-as.data.frame(do.call(rbind, EDH_inscriptions))
class(EDH_df)
names(EDH_df)
# I am getting a lot of NA's but I am using categories from vojtech's JSON that exist in the API,, but probably the get.edh() function does not grab them.
# testing the clenaing script
cleaning_edh_inscriptions <- function(original_text) {
clean_text <- gsub(pattern="\\[[— ]+\\]", replacement="", x=original_text, perl=TRUE) # missing text in square brackets replaced by nothing
clean_text <- gsub(pattern="\\[[-]+\\]", replacement="", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="{[^}]*}[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #suggested substituted text in curly braces and with superscript number replaced by nothing
clean_text <- gsub(pattern="[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #getting rid of all superscripts
clean_text <- gsub(pattern="-\\n", replacement="", x=clean_text, perl=TRUE) #joining words split into two lines
clean_text <- gsub(pattern="[\\{\\<\\[\\(*\\)\\]\\>\\}]", replacement="", x=clean_text, perl=TRUE) #getting rid of square and round brackets, substituting with nothing
clean_text <- gsub(pattern="[⏕–⏓〛〚\\|,.#%?!—∙·❦⏑/]", replacement=" ", x=clean_text, perl=TRUE) #getting rid of all sorts of things that I don't need, substituting with space
clean_text <- gsub(pattern="(vacat|vac|vac.|v.)", replacement=" ", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="\\s+", replacement=" ", x=clean_text, perl=TRUE) # getting rid of more than one white space, substituting with one white space
clean_text <- gsub(pattern="^\\s", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the beginning of the line
clean_text <- gsub(pattern="\\s$", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the end of the line
return(clean_text)
}
# cleaning the dataset
inscriptions_cleaned <- EDH_df %>%
mutate(text_clean = cleaning_edh_inscriptions(EDH_df$transcription))
EDH_inscriptions <- lapply(EDH, function (x) x[c("ID","diplomatic_text", "transcription")])
EDH_df <-as.data.frame(do.call(rbind, EDH_inscriptions))
class(EDH_df)
names(EDH_df)
cleaning_edh_inscriptions <- function(original_text) {
clean_text <- gsub(pattern="\\[[— ]+\\]", replacement="", x=original_text, perl=TRUE) # missing text in square brackets replaced by nothing
clean_text <- gsub(pattern="\\[[-]+\\]", replacement="", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="{[^}]*}[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #suggested substituted text in curly braces and with superscript number replaced by nothing
clean_text <- gsub(pattern="[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #getting rid of all superscripts
clean_text <- gsub(pattern="-\\n", replacement="", x=clean_text, perl=TRUE) #joining words split into two lines
clean_text <- gsub(pattern="[\\{\\<\\[\\(*\\)\\]\\>\\}]", replacement="", x=clean_text, perl=TRUE) #getting rid of square and round brackets, substituting with nothing
clean_text <- gsub(pattern="[⏕–⏓〛〚\\|,.#%?!—∙·❦⏑/]", replacement=" ", x=clean_text, perl=TRUE) #getting rid of all sorts of things that I don't need, substituting with space
clean_text <- gsub(pattern="(vacat|vac|vac.|v.)", replacement=" ", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="\\s+", replacement=" ", x=clean_text, perl=TRUE) # getting rid of more than one white space, substituting with one white space
clean_text <- gsub(pattern="^\\s", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the beginning of the line
clean_text <- gsub(pattern="\\s$", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the end of the line
return(clean_text)
}
# cleaning the dataset
inscriptions_cleaned <- EDH_df %>%
mutate(text_clean = cleaning_edh_inscriptions(EDH_df$transcription))
cleaning_edh_inscriptions <- function(original_text) {
#clean_text <- gsub(pattern="\\[[— ]+\\]", replacement="", x=original_text, perl=TRUE) # missing text in square brackets replaced by nothing
clean_text <- gsub(pattern="\\[[-]+\\]", replacement="", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="{[^}]*}[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #suggested substituted text in curly braces and with superscript number replaced by nothing
clean_text <- gsub(pattern="[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #getting rid of all superscripts
clean_text <- gsub(pattern="-\\n", replacement="", x=clean_text, perl=TRUE) #joining words split into two lines
clean_text <- gsub(pattern="[\\{\\<\\[\\(*\\)\\]\\>\\}]", replacement="", x=clean_text, perl=TRUE) #getting rid of square and round brackets, substituting with nothing
clean_text <- gsub(pattern="[⏕–⏓〛〚\\|,.#%?!—∙·❦⏑/]", replacement=" ", x=clean_text, perl=TRUE) #getting rid of all sorts of things that I don't need, substituting with space
clean_text <- gsub(pattern="(vacat|vac|vac.|v.)", replacement=" ", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="\\s+", replacement=" ", x=clean_text, perl=TRUE) # getting rid of more than one white space, substituting with one white space
clean_text <- gsub(pattern="^\\s", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the beginning of the line
clean_text <- gsub(pattern="\\s$", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the end of the line
return(clean_text)
}
# cleaning the dataset
inscriptions_cleaned <- EDH_df %>%
mutate(text_clean = cleaning_edh_inscriptions(EDH_df$transcription))
cleaning_edh_inscriptions <- function(original_text) {
#clean_text <- gsub(pattern="\\[[— ]+\\]", replacement="", x=original_text, perl=TRUE) # missing text in square brackets replaced by nothing
#clean_text <- gsub(pattern="\\[[-]+\\]", replacement="", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="{[^}]*}[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #suggested substituted text in curly braces and with superscript number replaced by nothing
clean_text <- gsub(pattern="[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #getting rid of all superscripts
clean_text <- gsub(pattern="-\\n", replacement="", x=clean_text, perl=TRUE) #joining words split into two lines
clean_text <- gsub(pattern="[\\{\\<\\[\\(*\\)\\]\\>\\}]", replacement="", x=clean_text, perl=TRUE) #getting rid of square and round brackets, substituting with nothing
clean_text <- gsub(pattern="[⏕–⏓〛〚\\|,.#%?!—∙·❦⏑/]", replacement=" ", x=clean_text, perl=TRUE) #getting rid of all sorts of things that I don't need, substituting with space
clean_text <- gsub(pattern="(vacat|vac|vac.|v.)", replacement=" ", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="\\s+", replacement=" ", x=clean_text, perl=TRUE) # getting rid of more than one white space, substituting with one white space
clean_text <- gsub(pattern="^\\s", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the beginning of the line
clean_text <- gsub(pattern="\\s$", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the end of the line
return(clean_text)
}
# cleaning the dataset
inscriptions_cleaned <- EDH_df %>%
mutate(text_clean = cleaning_edh_inscriptions(EDH_df$transcription))
cleaning_edh_inscriptions <- function(clean_text) {
#clean_text <- gsub(pattern="\\[[— ]+\\]", replacement="", x=clean_text, perl=TRUE) # missing text in square brackets replaced by nothing
#clean_text <- gsub(pattern="\\[[-]+\\]", replacement="", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="{[^}]*}[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #suggested substituted text in curly braces and with superscript number replaced by nothing
clean_text <- gsub(pattern="[⁰¹²³⁴⁵⁶⁷⁸⁹]+", replacement="", x=clean_text, perl=TRUE) #getting rid of all superscripts
clean_text <- gsub(pattern="-\\n", replacement="", x=clean_text, perl=TRUE) #joining words split into two lines
clean_text <- gsub(pattern="[\\{\\<\\[\\(*\\)\\]\\>\\}]", replacement="", x=clean_text, perl=TRUE) #getting rid of square and round brackets, substituting with nothing
clean_text <- gsub(pattern="[⏕–⏓〛〚\\|,.#%?!—∙·❦⏑/]", replacement=" ", x=clean_text, perl=TRUE) #getting rid of all sorts of things that I don't need, substituting with space
clean_text <- gsub(pattern="(vacat|vac|vac.|v.)", replacement=" ", x=clean_text, perl=TRUE)
clean_text <- gsub(pattern="\\s+", replacement=" ", x=clean_text, perl=TRUE) # getting rid of more than one white space, substituting with one white space
clean_text <- gsub(pattern="^\\s", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the beginning of the line
clean_text <- gsub(pattern="\\s$", replacement="", x=clean_text, perl=TRUE) # getting rid of extra white space at the end of the line
return(clean_text)
}
# cleaning the dataset
inscriptions_cleaned <- EDH_df %>%
mutate(text_clean = cleaning_edh_inscriptions(EDH_df$transcription))
devtools::install_github("sdam-au/sdam", auth_token="51f84dceaf4d74b32c3aff161f213f492b0ce8b2")
library(ddhh)
library(dplyr)
library(tidyverse)
formals(“get.edh”)
formals('get.edh')
# access 1 inscription with specified hd_nr
insc_2564 <-get.edh(hd_nr="2564") # gets 1 inscription
# access 100 inscriptions - no success
sample100 <- get.edw(HD_nr=1:100)
# access 100 inscriptions - no success
sample100 <- get.edh(HD_nr=1:100)
# access 100 inscriptions - no success
sample100 <- get.edh(hd_nr=1:100)
# access 100 inscriptions - no success
sample10 <- get.edh(hd_nr=1:10)
# access 100 inscriptions - no success
sample10 <- get.edhw(hd_nr=1:10)
# access 100 inscriptions - no success
sample10 <- get.edhw(HD_nr=1:10)
# access 100 inscriptions - no success
sample10 <- get.edhw(HD_nr=1:10)
# access inscriptions from 1 place
Sofia <- get.edh(findspot_modern="Sofia") # produces list of 1, empty, not really an output I wanted
View(Sofia)
library(ddhh)
# access 1 inscription with specified hd_nr
insc_2564 <-get.edh(hd_nr="2564") # gets 1 inscription
# access 100 inscriptions - no success
sample10 <- get.edhw(HD_nr=1:10)
# access inscriptions from 1 country
Bulgaria <-get.edh(country="Bulgaria") # produces list of 1, empty, not really an output I wanted
View(Bulgaria)
# access 100 inscriptions - no success
sample10 <- get.edh(HD_nr=1:10)
marble <-get.edh(search = c("inscriptions", "geography"),
url = "https://edh-www.adw.uni-heidelberg.de/data/api", material = "marmor")
savehistory(file = ".Rhistory")
savehistory(file = ".Rhistory")
savehistory(file = "/testhistory.Rhistory")
savehistory(file = "/.Rhistory")
savehistory(file = ".Rhistory")
